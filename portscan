#!/bin/bash

# A simple port scanning tool that shows all ips with open ports for the specified port
#
# Author: KodaKato

printUsage() {
  echo "Usage: portscan [port] [ip with mask (default local ip)]"
}

# Function to calculate the network address
# This removes the parts of the ips that are not apart of the mask
calculateNetworkAddress() {
    local ip_with_mask=$1
    local ip_address
    local subnet_mask
    local network_address

    # Split the IP address and subnet mask
    IFS='/' read -ra parts <<< "$ip_with_mask"
    ip_address="${parts[0]}"
    subnet_mask="${parts[1]}"

    # Use the 'ipcalc' command to calculate the network address
    network_address=$(ipcalc -n -b "$ip_address/$subnet_mask" | awk -F= '/NETWORK/ {print $2}')
    
    # Set the result in the 'ip_addr' variable
    ip_addr="$network_address/$subnet_mask"
}

# Function to validate the input format to make sure it has mask
validateInputFormat() {
    local input="$1"
    local pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$"

    if ! [[ $input =~ $pattern ]]; then
      echo "Improper format! Remember to include mask! (192.168.1.0/##)"
      exit 1
    fi
}

# Colorizes the grep output to make it easier to read
colorizedGrep() {
    local line_count=0
    local color=2
    local increment=1

    while read -r line; do
        echo -e "$(tput setaf $color)$line$(tput sgr0)"
        line_count=$((line_count + 1))
        
        if [ "$line_count" -ge 9 ]; then
            line_count=0
            color=$((color + increment))
            if [ "$color" -gt 7 ]; then
                color=1
            fi
        fi
    done
}

## MAIN

# Check if proper amount of args provided
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
  printUsage
  exit 1
fi

# Check if the script is running as root (with sudo)
if [ "$EUID" -ne 0 ]; then
    echo "RUN AS SUDO!!"
    exit 1
fi

port="$1"


# Use local ip as default, if one not provided
if [ $# -eq 2 ]; then
  ip_addr=$2
else
  calculateNetworkAddress "$(ip addr show | grep -oP 'inet \K\S+' | grep -v '127.0.0.1')"
fi

# Check if in proper format
validateInputFormat "$ip_addr"

# Now scan for open ports
nmap -p $port $ip_addr | grep "open" -A 3 -B 4 | colorizedGrep

